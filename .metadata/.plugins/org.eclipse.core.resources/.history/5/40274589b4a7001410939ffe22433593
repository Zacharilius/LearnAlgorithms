package general;

import java.util.Random;

public class FindStartCircularArray {
	public static void main(String[] args){
		int[] sortedArray =  {0,0,1,2,3,4,5,6,7,8,9,10,11,12,12,13,13,14,16,17};
		Random r = new Random();
		
		int i = 0;
		while(i < 100){
			int[] testArr = new int[sortedArray.length];
			int  randPos = r.nextInt(sortedArray.length - 1);
			for(int j = 0; j < sortedArray.length; j++){
				testArr[j] = sortedArray[(randPos + j) % sortedArray.length];
			}
			//assertEquals("Position XXX", (sortedArray.length - randPos) % sortedArray.length, FindStartCircularArray.findMiddle(testArr), 0);
			i++;
		}
	}
	public static int findMiddle(int[] circArr){
		if(circArr.length == 0){
			throw new Error("Empty array");
		}
		else if(circArr.length == 1){
			return 0;
		}
		else if(circArr.length == 2){
			if(circArr[0] <= circArr[1]){
				return 0;
			}
			return 1;
		}
		int left = 0;
		int right = circArr.length - 1;
		int middle = (left + right) / 2;
		int startLowPos;
		while(true){
			if((circArr[left]  <= circArr[middle] && circArr[left] < circArr[right]) || circArr[middle] < circArr[right]){
				right = middle;
				
			}
			else{
				left = middle;
			}
			middle = (left + right) / 2;
			
			if(left == middle){
				if(circArr[left] <= circArr[right]){
					startLowPos =  left;
				}
				else{
					startLowPos =  right;
				}
				while(startLowPos > 0){
					if(circArr[startLowPos] != circArr[startLowPos - 1]){
						System.out.println(startLowPos);
						return startLowPos;
					}
					startLowPos--;
				}
				System.out.println(startLowPos);
				return startLowPos;
			}
		}
	}

}
